<!DOCTYPE html>
<html lang="en">

<head>
  <%- include("../components/head.ejs") %>
  <script src="/js/publication.js"></script>
  <meta name="description" content="Explore the research publications of the Material and Process Simulation Center (MSC) at Caltech.">
  <title>MSC | Research Publications</title>
  <style>
    .highlight {
      background-color: yellow;
    }
  </style>
</head>

<body>
  <!-- Header Section -->
  <%- include("../components/main-header.ejs") %>

  <!-- Statistics Section -->
  <section class="p-4 bg-blue-100 text-center">
    <h2 class="text-xl font-semibold">Currently, there are <span id="publication-count">0</span> publications.</h2>
    <p class="text-sm text-gray-600">Data fetched from caltech library, updated every hour.</p>
  </section>

  <!-- Search Section -->
  <section class="p-8 bg-gray-100">
    <div class="max-w-7xl mx-auto">
      <input id="search-input" type="text" placeholder="Search publications..." class="w-full px-4 py-2 mb-6 border border-gray-300 rounded-lg focus:outline-none focus:ring-2 focus:ring-blue-500">
    </div>
  </section>

  <!-- Publications List Section -->
  <section class="p-8 bg-gray-100">
    <div class="max-w-7xl mx-auto" id="publications-list">
      <!-- Publications will be populated by JavaScript -->
    </div>
  </section>

  <!-- Footer Section -->
  <%- include("../components/footer.ejs") %>

  <script>
    const publication = new Publication(app);

    let publications = [];
    const batchSize = 20;
    let currentBatch = 0;
    let searchTerm = '';

    // Function to create publication card with ID
    const createPublicationCard = (publication, searchTerm) => {
      const highlight = (text, term) => term ? text.replace(new RegExp(`(${term})`, 'gi'), '<span class="highlight">$1</span>') : text;
      return `
        <div class="bg-white rounded-lg shadow-lg p-6 mb-6 transform hover:scale-105 transition duration-500">
          <p class="text-gray-500 text-sm">Index: ${publication.index} | ID: ${publication.id}</p>
          <h3 class="text-2xl font-semibold mb-2 break-words">${highlight(publication.title, searchTerm)}</h3>
          <p class="text-gray-700 mb-2"><strong>Authors:</strong> ${highlight(publication.authors || 'N/A', searchTerm)}</p>
          <p class="text-gray-700 mb-2"><strong>Abstract:</strong> ${highlight(publication.abstract || 'No abstract available', searchTerm)}</p>
          <p class="text-gray-700 mb-2"><strong>DOI:</strong> ${publication.doi ? `<a href="https://doi.org/${publication.doi}" class="text-indigo-600 hover:underline">${highlight(publication.doi, searchTerm)}</a>` : 'N/A'}</p>
          <p class="text-gray-700 mb-2"><strong>Publisher:</strong> ${highlight(publication.publisher || 'N/A', searchTerm)}</p>
          <p class="text-gray-700 mb-2"><strong>Publication Date:</strong> ${highlight(publication.publicationDate || 'N/A', searchTerm)}</p>
          <a href="${publication.url}" target="_blank" class="inline-block mt-4 bg-blue-500 text-white px-4 py-2 rounded-lg hover:bg-blue-600 transition-colors">Read More</a>
        </div>`;
    };

    // Function to render publications in batches
    const renderPublicationsBatch = (filteredPublications) => {
      const publicationsList = document.getElementById('publications-list');
      const start = currentBatch * batchSize;
      const end = start + batchSize;
      const batch = filteredPublications.slice(start, end);
      publicationsList.innerHTML += batch.map(pub => createPublicationCard(pub, searchTerm)).join('');
      currentBatch++;
    };

    // Function to handle search
    const handleSearch = () => {
      searchTerm = document.getElementById('search-input').value.toLowerCase();
      const filteredPublications = publications.filter(pub =>
        pub.id === searchTerm ||
        pub.index == searchTerm ||
        pub.title.toLowerCase().includes(searchTerm) ||
        (pub.authors && pub.authors.toLowerCase().includes(searchTerm)) ||
        (pub.abstract && pub.abstract.toLowerCase().includes(searchTerm)) ||
        (pub.doi && pub.doi.toLowerCase().includes(searchTerm)) ||
        (pub.publisher && pub.publisher.toLowerCase().includes(searchTerm)) ||
        (pub.publicationDate && pub.publicationDate.toLowerCase().includes(searchTerm))
      );
      document.getElementById('publications-list').innerHTML = '';
      currentBatch = 0;
      renderPublicationsBatch(filteredPublications);
    };

    // Function to fetch and render publications
    const fetchAndRenderPublications = async () => {
      try {
        const response = await publication.getPublications();
        if (response.status === "success") {
          publications = response.data;
          document.getElementById('publication-count').textContent = publications.length;

          // Add index to each publication (from the back to front) (base 1)
          let j = 1;
          for (let i = publications.length - 1; i >= 0; i--) {
            publications[i].index = j++;
          }

          renderPublicationsBatch(publications);
        }
      } catch (error) {
        console.error('Error fetching publications:', error);
      }
    };

    // Event listener for scroll to load more publications
    window.addEventListener('scroll', () => {
      if (window.innerHeight + window.scrollY >= document.body.offsetHeight - 200) {
        const query = document.getElementById('search-input').value.toLowerCase();
        const filteredPublications = publications.filter(pub =>
          pub.id === query ||
          pub.index == query ||
          pub.title.toLowerCase().includes(query) ||
          (pub.authors && pub.authors.toLowerCase().includes(query)) ||
          (pub.abstract && pub.abstract.toLowerCase().includes(query)) ||
          (pub.doi && pub.doi.toLowerCase().includes(query)) ||
          (pub.publisher && pub.publisher.toLowerCase().includes(query)) ||
          (pub.publicationDate && pub.publicationDate.toLowerCase().includes(query))
        );
        renderPublicationsBatch(filteredPublications);
      }
    });

    // Fetch and render publications on page load
    document.addEventListener('DOMContentLoaded', () => {
      fetchAndRenderPublications();
      document.getElementById('search-input').addEventListener('input', handleSearch);
    });
  </script>
</body>

</html>